diff --git a/display/fbdev.c b/display/fbdev.c
index fe8d2ff..e8f0928 100644
--- a/display/fbdev.c
+++ b/display/fbdev.c
@@ -166,6 +166,30 @@ void fbdev_exit(void)
     close(fbfd);
 }
 
+void fbdev_blank(void) {
+  if (ioctl(fbfd, FBIOBLANK, FB_BLANK_NORMAL) == -1) {
+    LV_LOG_INFO("Failed to blank display");
+  }
+}
+
+void fbdev_unblank(void) {
+  struct fb_var_screeninfo var_info;
+  if (ioctl(fbfd, FBIOBLANK, FB_BLANK_UNBLANK) == -1) {
+    LV_LOG_INFO("Failed to unblank display");
+  }
+
+  if (ioctl(fbfd, FBIOGET_VSCREENINFO, &var_info) == -1) {
+    LV_LOG_INFO("Failed to fetch screen info");
+  }
+
+  var_info.yoffset = 0;
+
+  if (ioctl(fbfd, FBIOPAN_DISPLAY, &var_info) == -1) {
+    LV_LOG_INFO("Failed to pan display");
+  }
+}
+
+
 /**
  * Flush a buffer to the marked area
  * @param drv pointer to driver where this function belongs
diff --git a/display/fbdev.h b/display/fbdev.h
index b7f2c81..5e91f91 100644
--- a/display/fbdev.h
+++ b/display/fbdev.h
@@ -42,6 +42,8 @@ extern "C" {
  **********************/
 void fbdev_init(void);
 void fbdev_exit(void);
+void fbdev_blank(void);
+void fbdev_unblank(void);
 void fbdev_flush(lv_disp_drv_t * drv, const lv_area_t * area, lv_color_t * color_p);
 void fbdev_get_sizes(uint32_t *width, uint32_t *height, uint32_t *dpi);
 /**
diff --git a/indev/evdev.c b/indev/evdev.c
index 4d46b5b..d53ae53 100644
--- a/indev/evdev.c
+++ b/indev/evdev.c
@@ -218,25 +218,14 @@ void evdev_read(lv_indev_drv_t * drv, lv_indev_data_t * data)
         return ;
     /*Store the collected data*/
 
-#if EVDEV_CALIBRATE
-    data->point.x = map(evdev_root_x, EVDEV_HOR_MIN, EVDEV_HOR_MAX, 0, drv->disp->driver->hor_res);
-    data->point.y = map(evdev_root_y, EVDEV_VER_MIN, EVDEV_VER_MAX, 0, drv->disp->driver->ver_res);
-#else
     data->point.x = evdev_root_x;
     data->point.y = evdev_root_y;
-#endif
-
     data->state = evdev_button;
 
     if(data->point.x < 0)
       data->point.x = 0;
     if(data->point.y < 0)
       data->point.y = 0;
-    if(data->point.x >= drv->disp->driver->hor_res)
-      data->point.x = drv->disp->driver->hor_res - 1;
-    if(data->point.y >= drv->disp->driver->ver_res)
-      data->point.y = drv->disp->driver->ver_res - 1;
-
     return ;
 }
 
